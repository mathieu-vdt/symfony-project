{% extends 'base.html.twig' %}
{% form_theme form 'recipe/_form_theme.html.twig' %}

{% block title %}New Recipe{% endblock %}

{% block body %}
<section class="container mx-auto px-4 py-6 md:py-10">
  <header class="mb-6 md:mb-8 text-center">
    <h1 class="text-2xl md:text-4xl font-bold tracking-tight mb-2 md:mb-4">
      <span class="bg-gradient-to-r from-indigo-600 via-violet-600 to-fuchsia-600 bg-clip-text text-transparent">
        👨‍🍳 Create New Recipe
      </span>
    </h1>
    <p class="text-base md:text-lg text-zinc-600">Share your culinary creation with the community</p>
  </header>

  <div class="max-w-4xl mx-auto">
    {{ form_start(form, { 
      attr: {
        class: 'bg-white rounded-2xl md:rounded-3xl shadow-xl border border-zinc-200/60 overflow-hidden backdrop-blur-sm',
        'data-turbo': 'false',
        novalidate: 'novalidate'
      } 
    }) }}

    <div class="p-4 md:p-8 space-y-8 md:space-y-10">
      {# Basic Information Section #}
      <div class="space-y-4 md:space-y-6">
        <h2 class="text-xl md:text-2xl font-semibold text-zinc-800 border-b-2 border-indigo-100 pb-3 md:pb-4 flex items-center gap-2">
          📝 Basic Information
        </h2>
        
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6">
          <div class="lg:col-span-1">
            {{ form_row(form.title, {
              help: '🏷️ Give your recipe a descriptive and appetizing name'
            }) }}
          </div>
          
          <div class="lg:col-span-1">
            {{ form_row(form.category) }}
          </div>
        </div>

        <div>
          {{ form_row(form.description, {
            help: '💬 Briefly describe what makes this recipe special'
          }) }}
        </div>
      </div>

      {# Recipe Details Section #}
      <div class="space-y-4 md:space-y-6">
        <h2 class="text-xl md:text-2xl font-semibold text-zinc-800 border-b-2 border-green-100 pb-3 md:pb-4 flex items-center gap-2">
          📋 Recipe Details
        </h2>
        
        <div>
          {{ form_row(form.instructions, {
            help: '👨‍🍳 Provide step-by-step cooking instructions'
          }) }}
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-6">
          <div>
            {{ form_row(form.prepTime, {
              help: '⏱️ Time in minutes'
            }) }}
          </div>
          
          <div>
            {{ form_row(form.difficulty) }}
          </div>
        </div>
      </div>

      {# Ingredients Section #}
      <div class="space-y-4 md:space-y-6">
        <h2 class="text-xl md:text-2xl font-semibold text-zinc-800 border-b-2 border-orange-100 pb-3 md:pb-4 flex items-center gap-2">
          🥕 Ingredients
        </h2>
        
        <div>
          {{ form_row(form.ingredients, {
            help: '🛒 Select all ingredients needed for this recipe'
          }) }}
        </div>
      </div>

      {# Image Section #}
      <div class="space-y-4 md:space-y-6">
        <h2 class="text-xl md:text-2xl font-semibold text-zinc-800 border-b-2 border-purple-100 pb-3 md:pb-4 flex items-center gap-2">
          📸 Recipe Image
        </h2>
        
        <div>
          {% include 'recipe/_image_preview_field.html.twig' with { form: form } %}
        </div>
      </div>
    </div>

    {# Form Actions - Mobile Optimized #}
    <div class="bg-gradient-to-r from-zinc-50 to-zinc-100 px-4 md:px-8 py-4 md:py-6 border-t border-zinc-200 flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 sm:gap-0">
      <a href="{{ path('app_home') }}" 
         class="order-2 sm:order-1 inline-flex items-center justify-center gap-2 px-6 py-3 bg-white text-zinc-700 font-medium rounded-xl border border-zinc-300 hover:bg-zinc-50 focus:outline-none focus:ring-2 focus:ring-zinc-400 transition-all duration-200 shadow-sm hover:shadow touch-target">
        ← Cancel
      </a>
      
      <button type="submit" class="order-1 sm:order-2 inline-flex items-center justify-center gap-2 px-8 py-4 sm:py-3 bg-gradient-to-r from-indigo-600 to-violet-600 text-white font-medium rounded-xl hover:from-indigo-700 hover:to-violet-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition-all duration-200 shadow-lg hover:shadow-xl touch-target">
        ✨ Create Recipe
      </button>
    </div>

    {{ form_row(form._token) }}
    {{ form_end(form, { render_rest: false }) }}
  </div>
</section>
{% endblock %}

{% block javascripts %}
  {{ parent() }}
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Enhanced star rating functionality
      function initializeStarRating() {
        const ratingWrapper = document.querySelector('.star-rating-wrapper');
        if (!ratingWrapper) return;
        
        const stars = ratingWrapper.querySelectorAll('.star-rating-input');
        const starLabels = ratingWrapper.querySelectorAll('.star-rating-label');
        const difficultyLevel = ratingWrapper.querySelector('#difficulty-level');
        const clearBtn = ratingWrapper.querySelector('.clear-rating-btn');
        
        const levelNames = {
          '1': '⭐ Very Easy',
          '2': '⭐⭐ Easy', 
          '3': '⭐⭐⭐ Medium',
          '4': '⭐⭐⭐⭐ Hard',
          '5': '⭐⭐⭐⭐⭐ Very Hard'
        };
        
        function updateDifficultyDisplay() {
          const checked = ratingWrapper.querySelector('.star-rating-input:checked');
          if (checked) {
            const level = checked.getAttribute('data-level');
            difficultyLevel.textContent = levelNames[level] || 'No rating';
            updateStarVisuals(level);
          } else {
            difficultyLevel.textContent = 'No rating';
            updateStarVisuals(0);
          }
        }
        
        function updateStarVisuals(rating) {
          starLabels.forEach((label, index) => {
            const starLevel = parseInt(label.getAttribute('data-level'));
            if (starLevel <= rating) {
              label.classList.add('active');
            } else {
              label.classList.remove('active');
            }
          });
        }
        
        // Handle star clicks
        stars.forEach(star => {
          star.addEventListener('change', function() {
            updateDifficultyDisplay();
          });
        });
        
        // Handle star label clicks (better UX)
        starLabels.forEach(label => {
          label.addEventListener('click', function(e) {
            e.preventDefault();
            const level = this.getAttribute('data-level');
            const correspondingRadio = ratingWrapper.querySelector(`input[data-level="${level}"]`);
            if (correspondingRadio) {
              correspondingRadio.checked = true;
              updateDifficultyDisplay();
            }
          });
          
          // Hover effects
          label.addEventListener('mouseenter', function() {
            const level = this.getAttribute('data-level');
            updateStarVisuals(level);
          });
        });
        
        // Reset hover effects when leaving rating area
        ratingWrapper.addEventListener('mouseleave', function() {
          const checked = ratingWrapper.querySelector('.star-rating-input:checked');
          const level = checked ? checked.getAttribute('data-level') : 0;
          updateStarVisuals(level);
        });
        
        // Clear rating functionality
        if (clearBtn) {
          clearBtn.addEventListener('click', function() {
            stars.forEach(star => {
              star.checked = false;
            });
            updateDifficultyDisplay();
          });
        }
        
        // Initial display
        updateDifficultyDisplay();
      }
      
      // Enhanced ingredients functionality
      function initializeIngredients() {
        const ingredientsWrapper = document.querySelector('.checkbox-pills-wrapper');
        if (!ingredientsWrapper) return;
        
        const checkboxes = ingredientsWrapper.querySelectorAll('.enhanced-pill-input');
        const selectedCount = ingredientsWrapper.querySelector('#selected-count');
        const selectAllBtn = ingredientsWrapper.querySelector('.select-all-btn');
        const clearAllBtn = ingredientsWrapper.querySelector('.clear-all-btn');
        
        function updateCount() {
          const checked = ingredientsWrapper.querySelectorAll('.enhanced-pill-input:checked').length;
          if (selectedCount) {
            selectedCount.textContent = checked;
          }
        }
        
        // Update count on checkbox change
        checkboxes.forEach(checkbox => {
          checkbox.addEventListener('change', updateCount);
        });
        
        // Select all functionality
        if (selectAllBtn) {
          selectAllBtn.addEventListener('click', function() {
            checkboxes.forEach(checkbox => {
              checkbox.checked = true;
            });
            updateCount();
          });
        }
        
        // Clear all functionality
        if (clearAllBtn) {
          clearAllBtn.addEventListener('click', function() {
            checkboxes.forEach(checkbox => {
              checkbox.checked = false;
            });
            updateCount();
          });
        }
        
        // Initial count
        updateCount();
      }
      
      // Initialize all components
      initializeStarRating();
      initializeIngredients();
    });
  </script>
  
  <style>
    /* Enhanced star rating styles */
    .star-rating-label {
      cursor: pointer;
      transition: all 0.2s ease;
    }
    
    .star-icon {
      width: 2rem;
      height: 2rem;
      color: #d1d5db;
      transition: all 0.2s ease;
    }
    
    .star-rating-label:hover .star-icon,
    .star-rating-label.active .star-icon {
      color: #f59e0b;
      transform: scale(1.1);
    }
    
    .star-rating-input:checked + .star-rating-label .star-icon {
      color: #f59e0b;
    }
    
    /* Enhanced pill styles */
    .checkbox-pill-label {
      transition: all 0.2s ease;
    }
    
    .checkbox-pill-input:checked + .checkbox-pill-label {
      background-color: #f97316;
      color: white;
      transform: translateY(-1px);
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    }
  </style>
{% endblock %}
