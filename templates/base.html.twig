<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        <title>{% block title %}Welcome!{% endblock %}</title>
        <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 128 128%22><text y=%221.2em%22 font-size=%2296%22>‚ö´Ô∏è</text><text y=%221.3em%22 x=%220.2em%22 font-size=%2276%22 fill=%22%23fff%22>sf</text></svg>">
        {% block stylesheets %}
            {{ encore_entry_link_tags('app') }}
        {% endblock %}

        {% block javascripts %}
            {{ encore_entry_script_tags('app') }}
        {% endblock %}
    </head>
    <body>
        <div id="toast-container" class="fixed top-4 right-4 z-50 flex flex-col gap-3 pointer-events-none"></div>

        {# ================= NAVBAR ================= #}
        <nav class="bg-white/95 backdrop-blur-md border-b border-zinc-200 sticky top-0 z-40">
        <div class="container mx-auto px-4">
            <div class="flex h-16 items-center justify-between">
            {# Left: Brand + desktop links #}
            <div class="flex items-center gap-6">
                <a href="{{ path('app_home') }}" class="flex items-center gap-2">
                <span class="inline-flex h-8 w-8 items-center justify-center rounded-lg bg-indigo-600 text-white font-bold">CB</span>
                <span class="font-semibold text-zinc-800 hidden sm:block">Cookbook</span>
                </a>

                <div class="hidden lg:flex items-center gap-4">
                {% if app.user %}
                    <a href="{{ path('app_recipe_mine') }}"
                        class="rounded-xl px-3 py-2 text-sm font-medium transition-colors {{ mine|default(false) ? 'bg-indigo-600 text-white' : 'border border-zinc-300 text-zinc-700 hover:bg-zinc-50' }}">
                        My recipes
                    </a>
                    {% endif %}
                    <a href="{{ path('app_home') }}"
                    class="rounded-xl px-3 py-2 text-sm font-medium transition-colors {{ mine|default(false) ? 'border border-zinc-300 text-zinc-700 hover:bg-zinc-50' : 'bg-indigo-600 text-white' }}">
                    All
                    </a>

                    <a href="{{ path('app_graphql_info') }}"
                    class="inline-flex items-center gap-1 rounded-xl px-3 py-2 text-sm font-medium border border-purple-300 text-purple-700 hover:bg-purple-50 transition-colors">
                    <span>üöÄ</span>
                    GraphQL
                    </a>

                {% if app.user %}
                    <a href="{{ path('app_recipe_new') }}"
                    class="inline-flex items-center gap-2 rounded-lg bg-indigo-600 px-3 py-1.5 text-sm font-medium text-white hover:bg-indigo-700 transition-colors">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
                        fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                        class="h-4 w-4">
                        <path d="M12 5v14M5 12h14"/>
                    </svg>
                    New Recipe
                    </a>
                {% endif %}
                </div>
            </div>

            {# Right: Auth area (desktop) #}
            <div class="hidden lg:flex items-center gap-3">
                {% if app.user %}
                <span class="hidden xl:inline text-sm text-zinc-600">Signed in as <strong class="text-zinc-800">{{ app.user.username }}</strong></span>

                {# Avatar + dropdown #}
                <div class="relative" x-data="{ open:false }">
                    <button type="button"
                            class="flex items-center gap-2 rounded-full px-2 py-1 hover:bg-zinc-100 transition-colors"
                            aria-haspopup="menu"
                            aria-expanded="false"
                            onclick="this.nextElementSibling.classList.toggle('hidden')">
                    <span class="h-8 w-8 rounded-full bg-indigo-600 text-white text-sm font-semibold grid place-items-center">
                        {{ app.user.username|slice(0,1)|upper }}
                    </span>
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-zinc-500" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 10.94l3.71-3.71a.75.75 0 111.06 1.06l-4.24 4.24a.75.75 0 01-1.06 0L5.21 8.29a.75.75 0 01.02-1.08z" clip-rule="evenodd" />
                    </svg>
                    </button>
                    <div class="absolute right-0 mt-2 w-44 rounded-xl border border-zinc-200 bg-white p-1 shadow-lg hidden z-50"
                        role="menu">
                    <a href="{{ path('app_profile_my') }}"
                        class="block rounded-lg px-3 py-2 text-sm text-zinc-700 hover:bg-zinc-100 transition-colors"
                        role="menuitem">My Profile</a>
                    <a href="{{ path('app_home') }}"
                        class="block rounded-lg px-3 py-2 text-sm text-zinc-700 hover:bg-zinc-100 transition-colors"
                        role="menuitem">Dashboard</a>
                    
                    {% if is_granted('ROLE_ADMIN') %}
                        <a href="{{ path('admin_dashboard') }}"
                        class="block rounded-lg px-3 py-2 text-sm text-indigo-700 hover:bg-indigo-50 transition-colors"
                        role="menuitem">Admin</a>
                    {% endif %}

                    <form method="post" action="{{ path('app_logout') }}" class="block">
                        <button class="w-full text-left rounded-lg px-3 py-2 text-sm text-red-700 hover:bg-red-50 transition-colors" role="menuitem">
                        Logout
                        </button>
                    </form>
                    </div>
                </div>
                {% else %}
                <a href="{{ path('app_login') }}"
                    class="rounded-lg px-3 py-1.5 text-sm font-medium text-zinc-700 hover:bg-zinc-100 transition-colors">
                    Login
                </a>
                <a href="{{ path('app_register') }}"
                    class="inline-flex items-center gap-2 rounded-lg bg-indigo-600 px-3 py-1.5 text-sm font-medium text-white hover:bg-indigo-700 transition-colors">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
                        fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                        class="h-4 w-4">
                    <path d="M12 5v14M5 12h14"/>
                    </svg>
                    Register
                </a>
                {% endif %}
            </div>

            {# Mobile menu button #}
            <button class="lg:hidden inline-flex items-center justify-center rounded-lg p-2 text-zinc-600 hover:bg-zinc-100 transition-colors touch-target"
                    aria-label="Open menu"
                    onclick="toggleMobileMenu()">
                <svg id="menu-icon" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none"
                    viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                <path id="menu-open" stroke-linecap="round" stroke-linejoin="round"
                        d="M4 6h16M4 12h16M4 18h16" />
                <path id="menu-close" stroke-linecap="round" stroke-linejoin="round"
                        d="M6 18L18 6M6 6l12 12" class="hidden" />
                </svg>
            </button>
            </div>
        </div>

        {# Enhanced Mobile menu #}
        <div id="mobile-menu" class="lg:hidden hidden border-t border-zinc-200 bg-white shadow-lg">
            <div class="container mx-auto px-4 py-4 space-y-3">
            
            {# User info section for mobile #}
            {% if app.user %}
                <div class="flex items-center gap-3 p-3 bg-indigo-50 rounded-lg">
                    <span class="h-10 w-10 rounded-full bg-indigo-600 text-white font-semibold grid place-items-center">
                        {{ app.user.username|slice(0,1)|upper }}
                    </span>
                    <div class="flex-1">
                        <p class="text-sm font-medium text-indigo-900">{{ app.user.username }}</p>
                        <p class="text-xs text-indigo-600">{{ app.user.email|default('Member') }}</p>
                    </div>
                </div>
            {% endif %}

            {# Main navigation links #}
            <div class="space-y-2">
                <a href="{{ path('app_home') }}"
                class="flex items-center gap-3 rounded-lg px-4 py-3 text-sm font-medium text-zinc-700 hover:bg-zinc-100 transition-colors {{ mine|default(false) ? '' : 'bg-zinc-100' }}">
                    <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14-7H3m16 14H5" />
                    </svg>
                    All Recipes
                </a>

                {% if app.user %}
                    <a href="{{ path('app_recipe_mine') }}"
                    class="flex items-center gap-3 rounded-lg px-4 py-3 text-sm font-medium text-zinc-700 hover:bg-zinc-100 transition-colors {{ mine|default(false) ? 'bg-zinc-100' : '' }}">
                        <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                        </svg>
                        My Recipes
                    </a>
                {% endif %}

                <a href="{{ path('app_graphql_info') }}"
                class="flex items-center gap-3 rounded-lg px-4 py-3 text-sm font-medium text-purple-700 hover:bg-purple-50 transition-colors">
                    <span class="w-5 h-5 text-center">üöÄ</span>
                    GraphQL API
                </a>
            </div>

            {# Action buttons #}
            <div class="space-y-2 pt-3 border-t border-zinc-200">
                {% if app.user %}
                    <a href="{{ path('app_recipe_new') }}"
                    class="flex items-center gap-3 rounded-lg px-4 py-3 text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 transition-colors">
                        <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                        </svg>
                        Create New Recipe
                    </a>

                    <a href="{{ path('app_profile_my') }}"
                    class="flex items-center gap-3 rounded-lg px-4 py-3 text-sm font-medium text-zinc-700 hover:bg-zinc-100 transition-colors">
                        <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                        </svg>
                        My Profile
                    </a>

                    {% if is_granted('ROLE_ADMIN') %}
                        <a href="{{ path('admin_dashboard') }}"
                        class="flex items-center gap-3 rounded-lg px-4 py-3 text-sm font-medium text-indigo-700 bg-indigo-50 hover:bg-indigo-100 transition-colors">
                            <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                            </svg>
                            Admin Panel
                        </a>
                    {% endif %}

                    <form method="post" action="{{ path('app_logout') }}" class="block">
                        <button class="flex items-center gap-3 w-full rounded-lg px-4 py-3 text-sm font-medium text-red-700 hover:bg-red-50 transition-colors">
                            <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                            </svg>
                            Logout
                        </button>
                    </form>
                {% else %}
                    <a href="{{ path('app_login') }}"
                    class="flex items-center gap-3 rounded-lg px-4 py-3 text-sm font-medium text-zinc-700 hover:bg-zinc-100 transition-colors">
                        <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1" />
                        </svg>
                        Login
                    </a>
                    <a href="{{ path('app_register') }}"
                    class="flex items-center gap-3 rounded-lg px-4 py-3 text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 transition-colors">
                        <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z" />
                        </svg>
                        Register
                    </a>
                {% endif %}
            </div>
            </div>
        </div>
        </nav>
        {# =============== END NAVBAR =============== #}


        {# Serialize flashes as <template> data so we don't "consume" them elsewhere #}
        {% for type, messages in app.flashes %}
            {% for message in messages %}
            <template class="toast-data"
                        data-type="{{ type }}"
                        data-message="{{ message|e('html_attr') }}"></template>
            {% endfor %}
        {% endfor %}

        {% block body %}{% endblock %}

        {# Enhanced Toast JS with beautiful animations and better UX #}
        <script>
            // Enhanced Toast System
            class ToastManager {
                constructor() {
                    this.container = document.getElementById('toast-container');
                    this.toasts = new Set();
                    this.maxToasts = 5;
                    this.setupStyles();
                }

                setupStyles() {
                    const styles = `
                        <style id="toast-styles">
                            .toast-item {
                                min-width: 320px;
                                max-width: 480px;
                                backdrop-filter: blur(12px);
                                transform: translateX(100%);
                                transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
                                position: relative;
                                overflow: hidden;
                            }
                            
                            .toast-item.show {
                                transform: translateX(0);
                            }
                            
                            .toast-item.hide {
                                transform: translateX(100%);
                                opacity: 0;
                            }
                            
                            .toast-progress {
                                position: absolute;
                                bottom: 0;
                                left: 0;
                                height: 3px;
                                background: rgba(255, 255, 255, 0.3);
                                transition: width linear;
                                border-radius: 0 0 12px 12px;
                            }
                            
                            .toast-success {
                                background: linear-gradient(135deg, rgba(34, 197, 94, 0.95) 0%, rgba(21, 128, 61, 0.95) 100%);
                                color: white;
                                border: 1px solid rgba(34, 197, 94, 0.3);
                                box-shadow: 0 8px 32px rgba(34, 197, 94, 0.3);
                            }
                            
                            .toast-error, .toast-danger {
                                background: linear-gradient(135deg, rgba(239, 68, 68, 0.95) 0%, rgba(185, 28, 28, 0.95) 100%);
                                color: white;
                                border: 1px solid rgba(239, 68, 68, 0.3);
                                box-shadow: 0 8px 32px rgba(239, 68, 68, 0.3);
                            }
                            
                            .toast-warning {
                                background: linear-gradient(135deg, rgba(245, 158, 11, 0.95) 0%, rgba(217, 119, 6, 0.95) 100%);
                                color: white;
                                border: 1px solid rgba(245, 158, 11, 0.3);
                                box-shadow: 0 8px 32px rgba(245, 158, 11, 0.3);
                            }
                            
                            .toast-info {
                                background: linear-gradient(135deg, rgba(59, 130, 246, 0.95) 0%, rgba(37, 99, 235, 0.95) 100%);
                                color: white;
                                border: 1px solid rgba(59, 130, 246, 0.3);
                                box-shadow: 0 8px 32px rgba(59, 130, 246, 0.3);
                            }
                            
                            .toast-icon {
                                width: 24px;
                                height: 24px;
                                flex-shrink: 0;
                                display: flex;
                                align-items: center;
                                justify-content: center;
                                background: rgba(255, 255, 255, 0.2);
                                border-radius: 50%;
                                font-size: 14px;
                            }
                            
                            .toast-close {
                                width: 24px;
                                height: 24px;
                                border-radius: 50%;
                                background: rgba(255, 255, 255, 0.1);
                                border: none;
                                color: rgba(255, 255, 255, 0.8);
                                cursor: pointer;
                                display: flex;
                                align-items: center;
                                justify-content: center;
                                transition: all 0.2s ease;
                                font-size: 16px;
                                flex-shrink: 0;
                            }
                            
                            .toast-close:hover {
                                background: rgba(255, 255, 255, 0.2);
                                color: white;
                                transform: scale(1.1);
                            }
                            
                            .toast-content {
                                flex: 1;
                                line-height: 1.4;
                                font-weight: 500;
                            }
                            
                            @keyframes bounce-in {
                                0% { transform: scale(0.3) translateX(100%); }
                                50% { transform: scale(1.05) translateX(-10px); }
                                70% { transform: scale(0.95) translateX(5px); }
                                100% { transform: scale(1) translateX(0); }
                            }
                            
                            .toast-bounce {
                                animation: bounce-in 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55);
                            }
                            
                            @media (max-width: 640px) {
                                .toast-item {
                                    min-width: calc(100vw - 32px);
                                    max-width: calc(100vw - 32px);
                                    margin: 0 16px;
                                }
                                
                                #toast-container {
                                    left: 0;
                                    right: 0;
                                    top: 16px;
                                    padding: 0;
                                }
                            }
                        </style>
                    `;
                    
                    if (!document.getElementById('toast-styles')) {
                        document.head.insertAdjacentHTML('beforeend', styles);
                    }
                }

                getIcon(type) {
                    const icons = {
                        success: '‚úì',
                        error: '‚úï',
                        danger: '‚úï',
                        warning: '‚ö†',
                        info: '‚Ñπ'
                    };
                    return icons[type] || '‚Ñπ';
                }

                createToast(message, type = 'info', duration = 5000) {
                    // Limit number of toasts
                    if (this.toasts.size >= this.maxToasts) {
                        const oldestToast = this.toasts.values().next().value;
                        this.removeToast(oldestToast, false);
                    }

                    const toast = document.createElement('div');
                    const toastId = Date.now() + Math.random();
                    toast.setAttribute('data-toast-id', toastId);
                    
                    toast.className = `toast-item toast-${type} rounded-xl p-4 shadow-2xl relative`;
                    
                    toast.innerHTML = `
                        <div class="flex items-start gap-3">
                            <div class="toast-icon">
                                ${this.getIcon(type)}
                            </div>
                            <div class="toast-content">
                                ${message}
                            </div>
                            <button class="toast-close" aria-label="Close notification">
                                ‚úï
                            </button>
                        </div>
                        <div class="toast-progress"></div>
                    `;

                    // Add event listeners
                    const closeBtn = toast.querySelector('.toast-close');
                    const progressBar = toast.querySelector('.toast-progress');
                    
                    closeBtn.addEventListener('click', () => {
                        this.removeToast(toast);
                    });

                    // Add to container and track
                    this.container.appendChild(toast);
                    this.toasts.add(toast);

                    // Trigger entrance animation
                    requestAnimationFrame(() => {
                        toast.classList.add('show', 'toast-bounce');
                    });

                    // Progress bar animation
                    if (duration > 0) {
                        progressBar.style.width = '100%';
                        setTimeout(() => {
                            progressBar.style.width = '0%';
                            progressBar.style.transition = `width ${duration}ms linear`;
                        }, 100);

                        // Auto remove
                        setTimeout(() => {
                            if (toast.parentNode) {
                                this.removeToast(toast);
                            }
                        }, duration);
                    }

                    // Pause on hover
                    toast.addEventListener('mouseenter', () => {
                        progressBar.style.animationPlayState = 'paused';
                    });

                    toast.addEventListener('mouseleave', () => {
                        progressBar.style.animationPlayState = 'running';
                    });

                    return toast;
                }

                removeToast(toast, animate = true) {
                    if (!toast || !toast.parentNode) return;
                    
                    this.toasts.delete(toast);
                    
                    if (animate) {
                        toast.classList.add('hide');
                        setTimeout(() => {
                            if (toast.parentNode) {
                                toast.remove();
                            }
                        }, 400);
                    } else {
                        toast.remove();
                    }
                }

                clear() {
                    this.toasts.forEach(toast => {
                        this.removeToast(toast);
                    });
                    this.toasts.clear();
                }
            }

            // Initialize toast manager
            const toastManager = new ToastManager();

            // Global function for backward compatibility
            function createToast(message, type = 'info', duration = 5000) {
                return toastManager.createToast(message, type, duration);
            }

            // Enhanced flash message handling
            (function mountToastsOncePerVisit(){
                function run() {
                    document.querySelectorAll('template.toast-data').forEach(tpl => {
                        const message = tpl.dataset.message;
                        const type = tpl.dataset.type;
                        
                        // Add slight delay for multiple messages
                        setTimeout(() => {
                            createToast(message, type);
                        }, Array.from(document.querySelectorAll('template.toast-data')).indexOf(tpl) * 200);
                        
                        tpl.remove();
                    });
                }
                
                document.addEventListener('DOMContentLoaded', run);
                document.addEventListener('turbo:load', run);
            })();

            // Keyboard shortcuts
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape') {
                    toastManager.clear();
                }
            });

            // Mobile menu toggle function
            function toggleMobileMenu() {
                const mobileMenu = document.getElementById('mobile-menu');
                const menuIcon = document.getElementById('menu-icon');
                const openPath = document.getElementById('menu-open');
                const closePath = document.getElementById('menu-close');
                
                if (mobileMenu.classList.contains('hidden')) {
                    mobileMenu.classList.remove('hidden');
                    openPath.classList.add('hidden');
                    closePath.classList.remove('hidden');
                    // Prevent body scroll when menu is open
                    document.body.style.overflow = 'hidden';
                } else {
                    mobileMenu.classList.add('hidden');
                    openPath.classList.remove('hidden');
                    closePath.classList.add('hidden');
                    // Restore body scroll
                    document.body.style.overflow = '';
                }
            }

            // Close mobile menu on escape key
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape') {
                    const mobileMenu = document.getElementById('mobile-menu');
                    if (!mobileMenu.classList.contains('hidden')) {
                        toggleMobileMenu();
                    }
                }
            });

            // Close mobile menu when clicking outside
            document.addEventListener('click', (e) => {
                const mobileMenu = document.getElementById('mobile-menu');
                const menuButton = e.target.closest('[aria-label="Open menu"]');
                
                if (!mobileMenu.classList.contains('hidden') && !menuButton && !mobileMenu.contains(e.target)) {
                    toggleMobileMenu();
                }
            });

            // Add touch-friendly styles
            const style = document.createElement('style');
            style.textContent = `
                .touch-target {
                    min-height: 44px;
                    min-width: 44px;
                }
                
                @media (max-width: 768px) {
                    /* Improve touch targets on mobile */
                    button, a {
                        min-height: 44px;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                    }
                    
                    /* Better spacing for mobile */
                    .container {
                        padding-left: 1rem;
                        padding-right: 1rem;
                    }
                    
                    /* Prevent horizontal overflow */
                    body {
                        overflow-x: hidden;
                    }
                    
                    /* Better mobile menu transitions */
                    #mobile-menu {
                        transition: all 0.3s ease-in-out;
                        max-height: calc(100vh - 64px);
                        overflow-y: auto;
                    }
                    
                    #mobile-menu.hidden {
                        max-height: 0;
                        overflow: hidden;
                    }
                }
            `;
            document.head.appendChild(style);
        </script>
    </body>
</html>
